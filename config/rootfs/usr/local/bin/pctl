#!/usr/bin/env bash

set -e
set -o pipefail

SCRIPT_DIR="$(dirname "$0")"
LIB_DIR="$SCRIPT_DIR/lib"
STATE_FOLDER="$XDG_RUNTIME_DIR/player"
mkdir -p "$STATE_FOLDER"
SYSTEMD_DESCRIPTION_CACHE="$STATE_FOLDER/systemdDescriptionCache"
exec 4<>"${STATE_FOLDER}/current_lock"
exec 5<>"${SYSTEMD_DESCRIPTION_CACHE}_lock"

# shellcheck disable=2317
function unlock() {
  flock -u 4
  flock -u 5
}

trap "unlock" EXIT

function fail() {
  echo "$@" >/dev/stderr
  exit 1
}

function getPIDFromPlayerctlName() {
  echo "$1" | sed -r 's#^[a-z._-]+([0-9]+)$#\1#g'
}

function getUnitDescription() {
  [[ -z "$1" ]] && return 1
  if ! grep -E "^$1=" "$SYSTEMD_DESCRIPTION_CACHE" | awk -F= '{print $2}'; then
    flock -x 5
    (
      cat "$SYSTEMD_DESCRIPTION_CACHE"
      echo -n "$1="
      if [[ "$1" == "youtube-music-desktop-app" ]]; then
        echo "YouTube Music Player"
      elif [[ "$1" =~ ^kdeconnect ]]; then
        echo "Phone"
      else
        "$LIB_DIR/getSystemdUnitDescriptionForPID" "$(getPIDFromPlayerctlName "$1")"
      fi
    ) | sort -u | sponge "$SYSTEMD_DESCRIPTION_CACHE"
    flock -u 5
  fi
}

function filterBySystemdUnit() {
  local -a blacklist=(Phone 'Google Chrome for work' WhatsApp)
  while read -r player; do
    if ! printf "%s\n" "${blacklist[@]}" | grep -Eq "^$(getUnitDescription "$player")\$"; then
      echo "$player"
    fi
  done
}

function list() {
  playerctl -l 2>/dev/null | sort -u | filterBySystemdUnit
}

function getNext() {
  if [[ "$(list | wc -l)" -gt 1 ]]; then
    PLAYER=$(list | awk "/$PLAYER/ {number = NR+1}; NR == number {print \$0}; NR == 1 {first = \$0}; END {if (length(number) == 0) {print first} else if (number > NR) {print first} }")
  fi
  echo "$PLAYER"
}

function switchToNext() {
  flock -x 4
  PLAYER="$(getNext | tee "$STATE_FOLDER/current")"
  flock -u 4
  notify-send.sh -h string:x-dunst-stack-tag:player -t 1000 -u normal "$(getUnitDescription "$PLAYER"): $("$0" status)"
  echo "$PLAYER"
}

function initialize() {
  if [[ ! -v PLAYER ]]; then
    if [[ -f "$STATE_FOLDER/current" ]]; then
      flock -s 4
      PLAYER=$(head -1 "$STATE_FOLDER/current" | awk '{print $1}')
      flock -u 4
    else
      PLAYER=$(switchToNext)
    fi

    PLAYER=$(list | awk "/$PLAYER/ {number = NR; print \$0}; NR == 1 {first = \$0}; END {if (length(number) == 0) {print first} }")

    flock -s 4
    if [[ "$PLAYER" != "$(cat "$STATE_FOLDER/current")" ]]; then
      echo "$PLAYER" >"$STATE_FOLDER/current"
    fi
    flock -u 4
  fi

  if ! list | grep . &>/dev/null; then
    fail No players found
  fi
}

function swap() {
  pctl -p "$1" play-pause
  pctl -p "$2" play-pause
}

function getUnitName() {
  "$LIB_DIR/getSystemdUnitNameForPID" "$(getPIDFromPlayerctlName "$1")"
}

case "$1" in
  swap)
    swap "$2" "$3"
    ;;
  NEXT)
    initialize
    switchToNext
    ;;
  PRINT)
    if [[ "$2" == -f ]]; then
      "$0" PRINT -i
      (
        set -e
        tail -F "$STATE_FOLDER/current" 2>/dev/null &
        pactl subscribe | grep -E --line-buffered "'(new|remove)' on sink-input"
      ) | while read -r _; do
        "$0" PRINT -i
      done
    elif [[ "$2" == -i ]]; then
      if ! "$0" PRINT; then
        "$0" NEXT || true
      fi
    else
      initialize
      getUnitDescription "$PLAYER"
    fi
    ;;
  LIST)
    initialize
    for player in $(list); do
      getUnitDescription "$player"
    done
    ;;
  -s)
    unit="$2"
    shift
    shift
    [[ -z "$unit" ]] && fail Need to provide the unit name
    initialize
    while [[ ! "$(getUnitName "$PLAYER")" =~ $unit(.service)? ]]; do
      PLAYER=$(getNext)
    done
    export PLAYER
    exec "$0" "$@"
    ;;
  volume)
    volume=$2
    [[ -z "$volume" ]] && fail "Need to provide the volume"
    initialize
    unit=$(getUnitName "$PLAYER")
    "$SCRIPT_DIR/audio_program_volume" -u "$unit" -v "$volume"
    ;;
  *)
    initialize
    exec playerctl -p "$PLAYER" "$@"
    ;;
esac

exit 0
