#!/usr/bin/env bash

set -x

declare -A games
declare -A gameServiceMappings
declare -A gameScriptMapping
declare -A gameScreenSettings
source "$XDG_CONFIG_HOME/gamemode.bash"

function detect_game() {
  local processes
  processes=$(ps x)
  for process in "${!games[@]}"; do
    if grep -E -q "$process" <<<"$processes"; then
      echo "${games[$process]}"
      return 0
    fi
  done
  return 1
}

toolIDs=("$( (
  grep -Eo 'require_tool_appid"\s+"[0-9]+"' "$XDG_DATA_HOME/Steam/compatibilitytools.d/"*/toolmanifest.vdf | awk '{print $2}' | tr -d '"'
  grep -Eo 'Loaded manifest for tool [0-9]+' "$XDG_DATA_HOME/Steam/logs/compat_log.txt" | awk '{print $5}'
) | sort -u)")
function resolve_steam_appmanifest() {
  local path="$1"
  local appmanifest
  until appmanifest="$(grep -P -l '"installdir"\s+"\Q'"$(basename "$path")"'\E"' "$XDG_DATA_HOME/Steam/steamapps"/appmanifest_*.acf)" && ! grep -Eq '"appid"\s+"'"$(echo "${toolIDs[@]}" | paste -sd '|')"'"' "$appmanifest"; do
    path="$(dirname "$path")"
    [[ "$path" == "common" || "$path" == "$HOME" ]] && return 1
  done
  echo "$appmanifest"
  return 0
}

function auto_detect_steam_game() {
  SECONDS=0
  until (("$SECONDS" >= 5)); do
    local -a candidates=()
    local appmanifest=
    mapfile -t candidates < <(pgrep -f "$XDG_DATA_HOME/Steam/steamapps/common" | xargs -I{} cat /proc/{}/cmdline | grep -zZ steamapps | xargs -0 -r realpath)
    for candidate in "${candidates[@]}"; do
      if appmanifest="$(resolve_steam_appmanifest "$candidate")"; then
        grep -P -o '^\s+"name"\s+"\K.+(?="$)' "$appmanifest"
        return 0
      fi
    done
    sleep 0.2
  done
  return 1
}

function auto_detect_bottles_game() {
  SECONDS=0
  if systemctl --user is-active -q bottles.slice; then
    until (("$SECONDS" >= 5)); do
      local pid=
      local -a candidate=()
      local cmdline=
      if pid="$(pgrep -f '/usr/bin/python3 /usr/bin/bottles-cli')"; then
        mapfile -d $'\0' -t candidate <"/proc/$pid/cmdline"
        eval "cmdline=( $(getopt --options "p:" -- "${candidate[@]}") )"
        if [[ "${cmdline[0]}" == '-p' ]]; then
          echo "${cmdline[1]}"
          return 0
        fi
        sleep 0.2
      fi
    done
    echo generic_bottles
    return 0
  else
    return 1
  fi
}

function adjust_for_game() {
  local game="${1?}"
  local service
  local screenSetting
  local script
  for service in ${gameServiceMappings[$game]}; do
    systemctl --user start --no-block "$service"
  done
  script="${gameScriptMapping[$game]}"
  if [[ -n "$script" ]]; then
    systemd-run --user --slice=gamemode.slice --property=Requires=gamemode.service --quiet --unit "script-$(systemd-escape "$game")" -- "$script"
  fi
  screenSetting="${gameScreenSettings[$game]:-single}Screen"
  if [[ "$(type -t "${screenSetting}")" == function ]]; then
    "${screenSetting}"
  fi
}

services=(glava.target picom.service)
STATE_DIR="$XDG_RUNTIME_DIR/gamemode"

case "$1" in
  start)
    rm -rf "$STATE_DIR"
    mkdir -p "$STATE_DIR"
    if game="$(detect_game)" || game="$(auto_detect_steam_game)" || game="$(auto_detect_bottles_game)"; then
      systemd-notify --status="Game detected: $game"
      adjust_for_game "$game"
    fi
    for service in "${services[@]}"; do
      if systemctl --user is-active -q "$service"; then
        touch "$STATE_DIR/$service"
        systemctl --user stop "$service"
      fi
    done
    ;;
  stop)
    for service in "${services[@]}"; do
      if [[ -f "$STATE_DIR/$service" ]]; then
        systemctl --user start "$service"
        rm -f "$STATE_DIR/$service"
      fi
    done
    autorandr_dmenu
    ;;
  *)
    echo "ðŸ¤·"
    exit 1
    ;;
esac
