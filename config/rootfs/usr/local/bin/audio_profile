#!/usr/bin/env python3
from typing import Dict, Sequence

from pulsectl import PulseCardProfileInfo

from lib.audio_script import *


def card_name_getter(card: PulseCardInfo) -> str:
    return card.proplist.get("bluez.alias") or card.proplist.get("device.description")

def card_description_getter(card: PulseCardInfo) -> str:
    name = card_name_getter(card)
    return f'{name} ({card.profile_active.description})'


def audio_profile():
    if default_sink != "@DEFAULT_SINK@" and default_sink != "auto_null":
        default_sinks = [s for s in sinks if s.name == default_sink]
        if default_sinks:
            default_sink_card_index: int = default_sinks[0].card
        else:
            default_sink_card_index: int = -1
    else:
        default_sink_card_index: int = -1

    profile_cards: Dict[PulseCardInfo, Sequence[PulseCardProfileInfo]] = {
        card: [profile for profile in card.profile_list if profile.available != 0] for card in cards}
    profile_cards: Dict[PulseCardInfo, Sequence[PulseCardProfileInfo]] = {card: profiles for card, profiles in
                                                                          profile_cards.items() if len(profiles) > 1}
    card: PulseCardInfo = get_choice(list(profile_cards.keys()), "card", card_description_getter,
                                     lambda c: c.index == default_sink_card_index,
                                     card_description_getter)
    if card is None:
        return

    profiles: Sequence[PulseCardProfileInfo] = profile_cards[card]

    profile: PulseCardProfileInfo = get_choice(profiles, f'profile for {card_name_getter(card)}', lambda p: p.description,
                                               lambda p: p.name == card.profile_active.name)

    if profile is None:
        return

    pulse.card_profile_set(card, profile)


if __name__ == "__main__":
    audio_profile()
