#!/usr/bin/env python3

import subprocess
import sys
from typing import Sequence, Callable

from lib.choices import get_choice as get_choice_shadow, ITEM


def get_choice(items: Sequence[ITEM], item_name: str, name_getter: Callable[[ITEM], str],
               active_selector: Callable[[ITEM], bool] = None) -> ITEM:
    return get_choice_shadow(items, item_name, name_getter, "Bluetooth", active_selector, auto_select=False)


class BluetoothDevice:
    def __init__(self, name: str, mac: str, connected: bool) -> None:
        self.name = name
        self.mac = mac
        self.connected = connected


def bluetooth_command(command: str, args: Sequence[str] = None) -> Sequence[str]:
    if args is not None:
        cmdline = f"{command} {args}"
    else:
        cmdline = command
    bluetooth_ctl: subprocess.Popen[str] = subprocess.Popen("bluetoothctl",
                                                            stdin=subprocess.PIPE,
                                                            stdout=subprocess.PIPE)
    bluetooth_ctl.stdin.write(cmdline.encode())
    bluetooth_ctl.stdin.close()
    bluetooth_ctl.wait()
    return [line.decode() for line in bluetooth_ctl.stdout.readlines()]


def bluetooth_dmenu():
    out_put: Sequence[Sequence[str]] = [
        line[7:-1].split(" ") for line in bluetooth_command("devices")
        if line.startswith("Device")
    ]

    devices: list[BluetoothDevice] = []

    for out in out_put:
        mac: str = out[0]
        name: str = " ".join(out[1:])
        connected: bool = "yes" in [
            connected for connected in bluetooth_command("info", mac)
            if "Connected" in connected
        ][0]
        devices.append(BluetoothDevice(name, mac, connected))

    device: BluetoothDevice = get_choice(
        sorted(devices, key=lambda d: (not d.connected, d.name)), "Device",
        lambda d: f'{d.name} ({"Connected" if d.connected else "Disconnected"})', lambda d: d.connected)

    if device is None:
        sys.exit(0)

    if device.connected:
        bluetooth_command("disconnect", device.mac)
    else:
        bluetooth_command("connect", device.mac)
        bluetooth_command("connect", device.mac)


if __name__ == "__main__":
    bluetooth_dmenu()
