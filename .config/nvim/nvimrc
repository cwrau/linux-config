call plug#begin('$XDG_DATA_HOME/nvim/plugins')
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " autocomplete
Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': ':UpdateRemotePlugins'}
Plug 'vim-syntastic/syntastic' " syntax check for most languages
Plug 'vim-airline/vim-airline' " better monitoring
Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'jiangmiao/auto-pairs' " add eg. (->)
" Plug 'christoomey/vim-tmux-navigator' " better tmux support
Plug 'kristijanhusak/vim-hybrid-material' " Dark Theme
Plug 'tpope/vim-surround' " Easy add matching parentheses
" Plug 'ctrlpvim/ctrlp.vim' " use Fuzzy Finder to switch between Files (C-p)
" Plug 'PotatoesMaster/i3-vim-syntax' " for syntax in i3 config file
" Plug 'easymotion/vim-easymotion'
" Plug 'mxw/vim-jsx'
" Plug 'w0rp/ale'
" Plug 'udalov/kotlin-vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'towolf/vim-helm'
Plug 'farmergreg/vim-lastplace'
Plug 'Chiel92/vim-autoformat'
Plug 'christoomey/vim-system-copy'
Plug 'pgdouyon/vim-evanesco'
" Plug 'Zaptic/elm-vim'
Plug 'mhinz/vim-startify'
Plug 'PProvost/vim-ps1'
Plug 'mechatroner/rainbow_csv'
Plug '/usr/share/vim/vimfiles/plugin/fzf.vim'
Plug 'junegunn/fzf.vim'
Plug 'stevearc/vim-arduino'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Plug 'sheerun/vim-polyglot'
" au BufWrite * :Autoformat " Autoformat destroys yaml's
noremap = :Autoformat<CR>
Plug 'autozimu/LanguageClient-neovim', {
      \   'branch': 'next',
      \   'do': 'bash install.sh',
      \ }

let g:LanguageClient_serverCommands = {
      \   'bash': ['bash-language-server', 'start'],
      \   'dockerfile': ['docker-langserver', '--stdio'],
      \   'yaml': ['yaml-language-server'],
      \   'java': ['java-language-server'],
      \   'kotlin': ['kotlin-language-server'],
      \ }

let g:LanguageClient_rootMarkers = ['stack.yaml']

let g:syntastic_dockerfile_checkers = ['hadolint']
let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_jump = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
map <Leader>lk :call LanguageClient#textDocument_hover()<CR>
map <Leader>lg :call LanguageClient#textDocument_definition()<CR>
map <Leader>lr :call LanguageClient#textDocument_rename()<CR>
map <Leader>lf :call LanguageClient#textDocument_formatting()<CR>
map <Leader>lb :call LanguageClient#textDocument_references()<CR>
map <Leader>la :call LanguageClient#textDocument_codeAction()<CR>
map <Leader>ls :call LanguageClient#textDocument_documentSymbol()<CR>

Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
let g:mkdp_browser = 'google-chrome-stable'

"
"
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"
"function! s:check_back_space() abort
"  let col = col('.') - 1
"  return !col || getline('.')[col - 1]  =~# '\s'
"endfunction
"
"inoremap <silent><expr> <c-space> coc#refresh()
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
"

" call PlugInstall to install new plugins
call plug#end()

set modeline
set modelines=5
" basics
filetype plugin indent on
set number
set relativenumber
set incsearch
set ignorecase
set smartcase
set hlsearch
set tabstop=2
set softtabstop=0
set shiftwidth=2
set expandtab
set nobackup
set noswapfile
set nowrap
set undofile
set undodir=$XDG_CACHE_HOME/nvim-undodir
set inccommand=nosplit

" fuzzy finding with vim
set path+=**
" Enable autocompletion:
set wildmode=longest,list,full
" Spell-check set to <leader>o, 'o' for 'orthography':
map <F6>d :setlocal spell! spelllang=de<CR>
map <F6>e :setlocal spell! spelllang=en_us<CR>

" preferences
" j/k will move virtual lines (lines that wrap)
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
" Stay in visual mode when indenting. You will never have to run gv after
" performing an indentation.
vnoremap < <gv
vnoremap > >gv
" Make Y yank everything from the cursor to the end of the line. This makes Y
" act more like C or D because by default, Y yanks the current line (i.e. the
" same as yy).
"noremap Y y$
" navigate split screens easily
" change spacing for language specific
"autocmd Filetype javascript setlocal ts=2 sts=2 sw=2

" plugin settings

" deoplete
let g:deoplete#enable_at_startup = 1
" use tab to forward cycle
"inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" use tab to backward cycle
"inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
" Close the documentation window when completion is done
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" Theme
syntax enable
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
set termguicolors
set background=dark
let g:enable_bold_font = 1
let g:enable_italic_font = 1
colorscheme hybrid_material

map <C-n> :CHADopen<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

" jsx
let g:jsx_ext_required = 0
set guicursor=

let g:arduino_dir="/usr/share/arduino"

function! ArduinoStatusLine()
  let port = arduino#GetPort()
  let line = '[' . g:arduino_board . '] [' . g:arduino_programmer . ']'
  if !empty(port)
    let line = line . ' (' . port . ':' . g:arduino_serial_baud . ')'
  endif
  return line
endfunction

function! AirlineInit()
  let g:airline_section_c = airline#section#create([g:airline_section_c, '%{nvim_treesitter#statusline()}'])
endfunction

autocmd VimEnter * call AirlineInit()

lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- One of "all", "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = "maintained",

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    disable = {
      'yaml'
    },

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
  indent = {
    disable = {
      'yaml'
    }
  },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },
}
EOF

set nofoldenable
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()

highlight ExtraWhitespace ctermfg=167 guifg=#cc6666 ctermbg=167 guibg=#cc6666
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
match ExtraWhitespace /\s\+$/
autocmd BufWrite * :%s/\s\+$//e

autocmd BufReadCmd *.4app call zip#Browse(expand("<amatch>"))
filetype on
autocmd BufNewFile,BufRead *.ino let g:airline_section_y .= '%{ArduinoStatusLine()}'

