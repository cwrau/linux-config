plugin:
  node-shell:
    shortCut: s
    confirm: false
    description: Start shell in node
    scopes:
      - nodes
    background: false
    command: kubectl
    args:
      - node-shell
      - -n
      - kube-system
      - $NAME
  management-k9s:
    shortCut: k
    confirm: false
    description: Open K9s in management cluster
    scopes:
      - context
      - node
    background: false
    command: bash
    args:
      - -c
      - |
        clusterNamespace="$(kubectl get node -o=jsonpath='{.items[0].metadata.annotations.cluster\.x-k8s\.io/cluster-namespace}')"
        clusterName="$(kubectl get node -o=jsonpath='{.items[0].metadata.annotations.cluster\.x-k8s\.io/cluster-name}')"
        for mgmt_cluter in $(gopass list --flat | grep -E 'kube-?config' | grep mgmt); do
          export KUBECONFIG="${XDG_RUNTIME_DIR}/gopass/${mgmt_cluter}"
          if kubectl -n $clusterNamespace get cluster $clusterName &>/dev/null; then
            exec k9s -c cluster -n $clusterNamespace
            exit 0
          fi
        done
        exit 1
  workload-k9s:
    shortCut: k
    confirm: false
    description: Open K9s in workload cluster
    scopes:
      - teutonetescluster
      - cluster
    background: false
    command: bash
    args:
      - -ec
      - |
        NEW_KUBECONFIG="$(mktemp -p "$XDG_RUNTIME_DIR")"
        trap 'rm -f $NEW_KUBECONFIG' EXIT
        kubectl -n $NAMESPACE get secrets ${NAME}-kubeconfig -o jsonpath='{.data.value}' | base64 -d > "$NEW_KUBECONFIG"
        env KUBECONFIG="$NEW_KUBECONFIG" k9s
  cluster-shell:
    shortCut: s
    confirm: false
    description: Enter shell with KUBECONFIG and openstack credentials for cluster
    scopes:
      - teutonetescluster
      - cluster
    background: false
    command: capo-shell
    args:
      - $NAMESPACE
      - $NAME
  openstack-logs:
    shortCut: l
    confirm: false
    description: View logs of openstack machine
    scopes:
      - openstackmachines
    background: false
    command: bash
    args:
      - -c
      - |
        secretName="$(kubectl -n "$NAMESPACE" get openstackmachine "$NAME" -o jsonpath='{.spec.identityRef.name}')"
        envs=( $(kubectl -n "$NAMESPACE" get secret "$secretName" -o jsonpath='{.data.clouds\.yaml}' | base64 -d | yq -r '.clouds.openstack | {OS_AUTH_TYPE: .["auth_type"], OS_AUTH_URL: .auth["auth_url"], OS_APPLICATION_CREDENTIAL_ID: .auth["application_credential_id"], OS_APPLICATION_CREDENTIAL_SECRET: .auth["application_credential_secret"], OS_REGION_NAME: .["region_name"], OS_INTERFACE: .interface, OS_IDENTITY_API_VERSION: .["identity_api_version"]} | to_entries[] | "\(.key)=\(.value)"') )
          #while true; do
          #  env "${envs[@]}" openstack console log show "$(kubectl -n "$NAMESPACE" get openstackmachine "$NAME" -o jsonpath='{.spec.instanceID}')"
          #  sleep 1
          #done | awk '!x[$0]++' | lnav
        env "${envs[@]}" openstack console log show "$(kubectl -n "$NAMESPACE" get openstackmachine "$NAME" -o jsonpath='{.spec.instanceID}')" | exec lnav
  openstack-shell-teutonetescloud-images:
    shortCut: i
    confirm: false
    description: Enter openstack shell for cloud images
    scopes:
      - teutonetescloud
    background: false
    command: bash
    args:
      - -c
      - |
        secretName="$(kubectl get teutonetescloud "$NAME" -o yaml | yq -r '.spec.identityRef.name')"
        envs=( $(kubectl -n "t8se-system" get secret "$secretName" -o jsonpath='{.data.clouds\.yaml}' | base64 -d | yq -r '.clouds.openstack | {OS_AUTH_PLUGIN: "password", OS_AUTH_URL: .auth["auth_url"], OS_USERNAME: .auth["username"], OS_PASSWORD: .auth["password"], OS_USER_DOMAIN_NAME: .auth["user_domain_name"], OS_DOMAIN_NAME: .auth["domain_name"], OS_REGION_NAME: .["region_name"], OS_INTERFACE: .interface, OS_IDENTITY_API_VERSION: .["identity_api_version"]} | to_entries[] | "\(.key)=\(.value)"') )
        imageProjectID="$(kubectl get teutonetescloud "$NAME" -o jsonpath='{.status.imageProject.id}')"
        exec env OS_SHELL=true "${envs[@]}" OS_PROJECT_ID=$imageProjectID zsh
  openstack-shell-teutonetescloud:
    shortCut: s
    confirm: false
    description: Enter openstack shell for cloud
    scopes:
      - teutonetescloud
    background: false
    command: bash
    args:
      - -c
      - |
        secretName="$(kubectl get teutonetescloud "$NAME" -o yaml | yq -r '.spec.identityRef.name')"
        envs=( $(kubectl -n "t8se-system" get secret "$secretName" -o jsonpath='{.data.clouds\.yaml}' | base64 -d | yq -r '.clouds.openstack | {OS_AUTH_PLUGIN: "password", OS_AUTH_URL: .auth["auth_url"], OS_USERNAME: .auth["username"], OS_PASSWORD: .auth["password"], OS_USER_DOMAIN_NAME: .auth["user_domain_name"], OS_DOMAIN_NAME: .auth["domain_name"], OS_REGION_NAME: .["region_name"], OS_INTERFACE: .interface, OS_IDENTITY_API_VERSION: .["identity_api_version"]} | to_entries[] | "\(.key)=\(.value)"') )
        exec env OS_SHELL=true "${envs[@]}" zsh
  logs:
    shortCut: k
    description: Real logs
    confirm: false
    scopes:
      - pod
      - container
    background: false
    command: bash
    args:
      - -c
      - |
        set -x
        if [[ -n "$POD" ]]; then
          containerFlags=( "pod/$POD" --container "$NAME" )
        else
          containerFlags=( "pod/$NAME" --all-containers --max-log-requests 20 --prefix )
        fi
        kubectl logs -n "$NAMESPACE" "${containerFlags[@]}" --tail 999999 -f | lnav
  flux-helmrelease-reconcile:
    shortCut: r
    confirm: false
    description: Reconcile Flux HelmRelease
    scopes:
      - helmrelease
    background: true
    command: bash
    args:
      - -c
      - |
        flux -n $NAMESPACE suspend helmrelease $NAME
        flux -n $NAMESPACE resume helmrelease $NAME
        flux -n $NAMESPACE reconcile helmrelease $NAME --with-source
  flux-kustomization-reconcile:
    shortCut: r
    confirm: false
    description: Reconcile Flux Kustomization
    scopes:
      - kustomization
    background: true
    command: bash
    args:
      - -c
      - |
        flux -n $NAMESPACE suspend kustomization $NAME
        flux -n $NAMESPACE resume kustomization $NAME
        flux -n $NAMESPACE reconcile kustomization $NAME --with-source
